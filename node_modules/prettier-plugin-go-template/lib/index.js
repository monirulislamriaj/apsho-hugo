"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printers = exports.languages = exports.parsers = void 0;
const prettier_1 = require("prettier");
const parser_html_1 = require("prettier/parser-html");
function stringHashcode(input) {
    var hash = 0, i, chr;
    for (i = 0; i < input.length; i++) {
        chr = input.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0;
    }
    return hash;
}
const htmlParser = parser_html_1.parsers.html;
const buildReplacement = (input) => `BPGT${stringHashcode(input)}EPGT`;
const replacements = new Map();
exports.parsers = {
    "go-template": Object.assign(Object.assign({}, htmlParser), { astFormat: "go-template", preprocess: (text) => {
            const regexp = /(?:{{.*?}}(?: *\n)?)|(?:<script(?:\n|.)*?>)((?:\n|.)*?)(?:<\/script>)/g;
            let replacedText = text.trim();
            let match;
            while ((match = regexp.exec(text)) != null) {
                const result = match[0];
                if (!result.includes("{{")) {
                    continue;
                }
                const replacement = buildReplacement(result);
                replacedText = replacedText.replace(result, replacement);
                const cleanedResult = result
                    .replace(/{{(?![-<])[ \t]*/g, "{{ ")
                    .replace(/[ \t]*(?<![->])}}/g, " }}")
                    .replace(/{{-[ \t]*/g, "{{- ")
                    .replace(/[ \t]*-}}/g, " -}}")
                    .replace(/{{<[ \t]*/g, "{{< ")
                    .replace(/[ \t]*>}}/g, " >}}")
                    .replace(/ *\n/g, "\n");
                replacements.set(replacement, cleanedResult);
            }
            return replacedText;
        } }),
};
exports.languages = [
    {
        name: "GoTemplate",
        parsers: ["go-template"],
        extensions: [
            ".go.html",
            ".gohtml",
            ".gotmpl",
            ".go.tmpl",
            ".tmpl",
            ".tpl",
            ".html.tmpl",
            ".html.tpl",
        ],
        vscodeLanguageIds: ["gotemplate", "gohtml", "GoTemplate", "GoHTML"],
    },
];
exports.printers = {
    "go-template": {
        embed: (_, __, textToDoc, options) => {
            const htmlDoc = textToDoc(options.originalText, {
                parser: "html",
            });
            const replacedHashes = [];
            const mappedDoc = prettier_1.doc.utils.mapDoc(htmlDoc, (docLeaf) => {
                if (typeof docLeaf !== "string") {
                    return docLeaf;
                }
                const regexp = /BPGT.*?EPGT/g;
                let result = docLeaf;
                let match;
                while ((match = regexp.exec(docLeaf)) != null) {
                    const hash = match[0];
                    const replacement = replacements.get(hash);
                    if (replacement) {
                        result = result.replace(hash, replacement);
                        replacedHashes.push(hash);
                    }
                }
                return result;
            });
            replacedHashes.forEach((hash) => replacements.delete(hash));
            return mappedDoc;
        },
    },
};
//# sourceMappingURL=data:application/json;base64,